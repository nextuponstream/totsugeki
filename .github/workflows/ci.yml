# https://github.com/actions-rs/meta/blob/d7602e71e8b4e6054edbeda7732ed0da8fbb8989/recipes/quickstart.md
on: [push, pull_request]

name: CI

jobs:
  check:
    name: Check
    runs-on: ubuntu-latest
    env:
      API_ADDR: localhost
      API_PORT: 3000
    steps:
      - uses: actions/checkout@v3
      - uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
            tournament-organiser-web/node_modules
            tournament-organiser-web/dist
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
      - run: cargo check
  
  # TODO compile tailwindcss using tailwind cli in CI

  test:
    name: Test Suite
    runs-on: ubuntu-latest
    env:
      API_ADDR: localhost
      API_PORT: 3000
      DATABASE_URL: postgres://toa:toa@localhost/toa
    steps:
      - uses: actions/checkout@v3
      - uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
            tournament-organiser-web/node_modules
            tournament-organiser-web/dist
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
      # postgres is available by default on ubuntu https://github.com/actions/runner-images/blob/main/images/ubuntu/Ubuntu2204-Readme.md#postgresql
      # https://dev.to/lxxxvi/github-action-using-pre-installed-postgres-5144
      - name: Start PostgreSQL
        run: |
          sudo systemctl start postgresql.service
          pg_isready
          sudo -u postgres createuser -s -d -r toa
          sudo -u postgres psql -c "ALTER USER toa WITH PASSWORD 'toa';"
      # avoid connecting to database when building with SQLX_OFFLINE.
      # Otherwise, it will expect that migrations are ran and relations (like a
      # table 'users') are there to check all queries are valid.
      - run: SQLX_OFFLINE=true cargo test -- --include-ignored

  lint-rust:
    name: Rustfmt
    runs-on: ubuntu-latest
    env:
      API_ADDR: localhost
      API_PORT: 3000
    steps:
      - uses: actions/checkout@v3
      - uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
            tournament-organiser-web/node_modules
            tournament-organiser-web/dist
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
      - run: rustup component add rustfmt
      - run: cargo fmt --all -- --check

  lint-typescript:
    name: eslint
    runs-on: ubuntu-latest
    env:
      API_ADDR: localhost
      API_PORT: 3000
    steps:
      - uses: actions/checkout@v3
      - uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
            tournament-organiser-web/node_modules
            tournament-organiser-web/dist
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
      - run: npm install
        working-directory: tournament-organiser-web
      - run: npm run lint-check:ci
        working-directory: tournament-organiser-web

  clippy:
    name: Clippy
    runs-on: ubuntu-latest
    env:
      API_ADDR: localhost
      API_PORT: 3000
    steps:
      - uses: actions/checkout@v3
      - uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
            tournament-organiser-web/node_modules
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
      - run: rustup component add clippy
      - run: cargo clippy -- -D warnings

  tournament-organiser-cypress-tests:
    name: tournament organiser cypress tests
    # rust, node and npm are installed https://github.com/actions/runner-images/blob/main/images/linux/Ubuntu2204-Readme.md#rust-tools
    runs-on: ubuntu-latest
    env:
      CYPRESS_BASE_URL: http://localhost:3000
      DATABASE_URL: postgres://toa:toa@localhost/toa
    steps:
      - uses: actions/checkout@v3
      - uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
            tournament-organiser-web/node_modules
            tournament-organiser-web/dist
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
      - run: cd ui && cargo run > test.ts && mv test.ts ../tournament-organiser-web/
      - name: Start PostgreSQL
        run: |
          sudo systemctl start postgresql.service
          pg_isready
          sudo -u postgres createuser -s -d -r toa
          sudo -u postgres psql -c "ALTER USER toa WITH PASSWORD 'toa';"
          sudo -u postgres psql -c "CREATE DATABASE toa;"
      - uses: cypress-io/github-action@v5
        with:
          working-directory: tournament-organiser-web
          install: true
          build: npm run build:ci && cd ../tournament-organiser-api && cargo sqlx migrate run
          start: cargo run --package tournament-organiser-api --release
          wait-on: 'http://localhost:3000'
          wait-on-timeout: 30
          browser: chrome
      - uses: actions/upload-artifact@v3
        if: failure()
        with:
          name: cypress-screenshots
          path: tournament-organiser-web/cypress/screenshots/
          retention-days: 2
